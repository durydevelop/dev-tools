/* soapC.cpp
   Generated by gSOAP 2.8.91 for /mnt/e/Dev/dev-tools/gsoap/temp/wsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.91 2021-10-04 15:08:06 GMT")


SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		return (void*)soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable:
		return (void*)soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		return (void*)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse:
		return (void*)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		return (void*)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse:
		return (void*)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		return (void*)soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		return (void*)soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure*>(p->ptr), ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure*>(p->ptr), ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure);
		break;
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable*>(p->ptr), ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable*>(p->ptr), ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable);
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse);
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse*>(p->ptr), _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse);
		break;
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*>(p->ptr), struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*>(p->ptr), struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
		break;
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*>(p->ptr), struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*>(p->ptr), struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *>(p->ptr), std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *>(p->ptr), std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		if (t == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure || soap_fbase(t, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *)p)[index] = *(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure type=%d location=%p object=%p\n", t, p, q));
		*(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure*)p = *(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure*)q;
		break;
	case SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable type=%d location=%p object=%p\n", t, p, q));
		*(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable*)p = *(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)p = *(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse*)p = *(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)p = *(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse*)p = *(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse*)q;
		break;
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)p = *(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)q;
		break;
	case SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)p = *(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records = NULL;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records);
#endif
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *tag, int id, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse), type))
		return soap->error;
	if (a->Records)
		soap_element_result(soap, "ns1:Records");
	if (!a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records)
	{	if (soap_element_empty(soap, "ns1:Records"))
			return soap->error;
	}
	else if (soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, "ns1:Records", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Records1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Records1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, "ns1:Records", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records, "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable"))
				{	soap_flag_Records1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:Records");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *p;
	size_t k = sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede);
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede);
#endif
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, int id, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_UserName", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Password", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Company", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:pSede", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_m_USCOREUserName1 = 1;
	size_t soap_flag_m_USCOREPassword1 = 1;
	size_t soap_flag_m_USCORECompany1 = 1;
	size_t soap_flag_pSede1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_m_USCOREUserName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_UserName", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName, "xsd:string"))
				{	soap_flag_m_USCOREUserName1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Password", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword, "xsd:string"))
				{	soap_flag_m_USCOREPassword1--;
					continue;
				}
			}
			if (soap_flag_m_USCORECompany1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Company", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany, "xsd:string"))
				{	soap_flag_m_USCORECompany1--;
					continue;
				}
			}
			if (soap_flag_pSede1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:pSede", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede, "xsd:string"))
				{	soap_flag_pSede1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_m_USCOREUserName1 > 0 || soap_flag_m_USCOREPassword1 > 0 || soap_flag_m_USCORECompany1 > 0 || soap_flag_pSede1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p;
	size_t k = sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQuery", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::return_ = NULL;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::return_);
#endif
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *tag, int id, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse), type))
		return soap->error;
	if (a->return_)
		soap_element_result(soap, "ns1:return");
	if (soap_out_PointerTostd__string(soap, "ns1:return", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:return", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *p;
	size_t k = sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_QueryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany);
	soap_default_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede);
	soap_default_bool(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount);
}

void _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede);
	soap_embedded(soap, &this->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount, SOAP_TYPE_bool);
#endif
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, int id, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_UserName", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Password", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Company", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:pSede", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:m_bCount", -1, &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_m_USCOREUserName1 = 1;
	size_t soap_flag_m_USCOREPassword1 = 1;
	size_t soap_flag_m_USCORECompany1 = 1;
	size_t soap_flag_pSede1 = 1;
	size_t soap_flag_m_USCOREbCount1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_m_USCOREUserName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_UserName", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName, "xsd:string"))
				{	soap_flag_m_USCOREUserName1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Password", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword, "xsd:string"))
				{	soap_flag_m_USCOREPassword1--;
					continue;
				}
			}
			if (soap_flag_m_USCORECompany1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Company", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany, "xsd:string"))
				{	soap_flag_m_USCORECompany1--;
					continue;
				}
			}
			if (soap_flag_pSede1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:pSede", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede, "xsd:string"))
				{	soap_flag_pSede1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREbCount1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:m_bCount", &a->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount, "xsd:boolean"))
				{	soap_flag_m_USCOREbCount1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_m_USCOREUserName1 > 0 || soap_flag_m_USCOREPassword1 > 0 || soap_flag_m_USCORECompany1 > 0 || soap_flag_pSede1 > 0 || soap_flag_m_USCOREbCount1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p;
	size_t k = sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_Query", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, &this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::item);
}

void ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, &this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::item);
#endif
}

int ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, int id, const ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, "ns1:item", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::item, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag, this, type);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, "ns1:item", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::item, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC2 soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *p;
	size_t k = sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, this, tag, type);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODGIR = NULL;
	this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODPRO = NULL;
	this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZP_USCOREDELAY = NULL;
}

void ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODGIR);
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODPRO);
	soap_serialize_PointerTodouble(soap, &this->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZP_USCOREDELAY);
#endif
}

int ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, const ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ZPCODGIR", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODGIR, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ZPCODPRO", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODPRO, ""))
		return soap->error;
	if (soap_out_PointerTodouble(soap, "ns1:ZP_DELAY", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZP_USCOREDELAY, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, this, type);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ZPCODGIR1 = 1;
	size_t soap_flag_ZPCODPRO1 = 1;
	size_t soap_flag_ZP_USCOREDELAY1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ZPCODGIR1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:ZPCODGIR", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODGIR, "xsd:string"))
				{	soap_flag_ZPCODGIR1--;
					continue;
				}
			}
			if (soap_flag_ZPCODPRO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:ZPCODPRO", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODPRO, "xsd:string"))
				{	soap_flag_ZPCODPRO1--;
					continue;
				}
			}
			if (soap_flag_ZP_USCOREDELAY1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodouble(soap, "ns1:ZP_DELAY", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZP_USCOREDELAY, "xsd:double"))
				{	soap_flag_ZP_USCOREDELAY1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC2 soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *p;
	size_t k = sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, this, tag, type);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, int id, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a, const char *type)
{
	size_t soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, ""))
				{	soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p;
	size_t k = sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *a, const char *tag, const char *type)
{
	if (soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag ? tag : "-ns1:zpcu_test_fascia_delay_TabularQuery", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, int id, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, "ns1:zpcu_test_fascia_delay_Query", -1, &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a, const char *type)
{
	size_t soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, "ns1:zpcu_test_fascia_delay_Query", &a->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, ""))
				{	soap_flag_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p;
	size_t k = sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *a, const char *tag, const char *type)
{
	if (soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag ? tag : "-ns1:zpcu_test_fascia_delay_Query", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery))
		soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, int id, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **)soap_malloc(soap, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag ? tag : "-ns1:zpcu_test_fascia_delay_TabularQuery", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_get_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery))
		soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, int id, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **)soap_malloc(soap, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, sizeof(struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag ? tag : "-ns1:zpcu_test_fascia_delay_Query", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_get_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTobool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap *soap, double *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_double);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap *soap, const char *tag, int id, double *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_double, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_double(soap, tag, id, *a, type);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap *soap, const char *tag, double **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (double **)soap_malloc(soap, sizeof(double *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_double(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (double **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_double, sizeof(double), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap *soap, double *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodouble(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap *soap, double **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodouble(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *tag, int id, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **)soap_malloc(soap, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, int id, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **)soap_malloc(soap, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQuery", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *tag, int id, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **)soap_malloc(soap, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_QueryResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, int id, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *tag, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **)soap_malloc(soap, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *)soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery, sizeof(_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_Query", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, int id, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ? type : NULL);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **)soap_malloc(soap, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *)soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ? type : NULL);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **)soap_malloc(soap, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *)soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag ? tag : "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, const std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, NULL, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, tag, &n, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *p;
	size_t k = sizeof(std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
