/* soapC.cpp
   Generated by gSOAP 2.8.116 for /home/fabio/Dev/dev-tools/gsoap/temp/wsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.116 2021-10-05 18:52:25 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable");
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure");
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		return soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery");
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		return soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query");
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		return soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable");
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure");
	case SOAP_TYPE_PointerTodouble:
		return soap_in_PointerTodouble(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable"))
		{	*type = SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable;
			return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure"))
		{	*type = SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure;
			return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponse"))
		{	*type = SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse;
			return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery"))
		{	*type = SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery;
			return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_QueryResponse"))
		{	*type = SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse;
			return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query"))
		{	*type = SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery;
			return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse:
		return ((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *)ptr)->soap_out(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponse", id, "");
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		return ((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)ptr)->soap_out(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", id, "");
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse:
		return ((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *)ptr)->soap_out(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_QueryResponse", id, "");
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		return ((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)ptr)->soap_out(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query", id, "");
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		return ((ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *)ptr)->soap_out(soap, tag, id, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable");
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return ((ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *)ptr)->soap_out(soap, tag, id, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure");
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		return soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, id, (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *const*)ptr, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery");
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		return soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, id, (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *const*)ptr, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query");
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		return soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, id, (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *const*)ptr, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable");
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, id, (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *const*)ptr, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure");
	case SOAP_TYPE_PointerTodouble:
		return soap_out_PointerTodouble(soap, tag, id, (double *const*)ptr, "xsd:double");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in /home/fabio/Dev/dev-tools/gsoap/temp/soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse:
		((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse:
		((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		((_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		((ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		((ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		soap_serialize___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, (const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)ptr);
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		soap_serialize___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, (const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodouble:
		soap_serialize_PointerTodouble(soap, (double *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return (void*)soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		return (void*)soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		return (void*)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse:
		return (void*)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		return (void*)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse:
		return (void*)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		return (void*)soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		return (void*)soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure*>(p->ptr), ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure*>(p->ptr), ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure);
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable*>(p->ptr), ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable*>(p->ptr), ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse*>(p->ptr), _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse);
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*>(p->ptr), struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*>(p->ptr), struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*>(p->ptr), struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*>(p->ptr), struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *>(p->ptr), std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *>(p->ptr), std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		if (t == SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure || soap_fbase(t, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *)p)[index] = *(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure **)q;
		}
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure type=%d location=%p object=%p\n", t, p, q));
		*(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure*)p = *(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure*)q;
		break;
	case SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable type=%d location=%p object=%p\n", t, p, q));
		*(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable*)p = *(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)p = *(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse*)p = *(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)p = *(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)q;
		break;
	case SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse*)p = *(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse*)q;
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)p = *(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)q;
		break;
	case SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)p = *(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records = NULL;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records);
#endif
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(struct soap *soap, const char *tag, int id, const _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse), type))
		return soap->error;
	if (a->Records)
		soap_element_result(soap, "ns1:Records");
	if (!a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records)
	{	if (soap_element_empty(soap, "ns1:Records", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, "ns1:Records", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Records1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Records1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, "ns1:Records", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable"))
				{	soap_flag_Records1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:Records");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::Records))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *p;
	size_t k = sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREUserName);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREPassword);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCORECompany);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::pSede);
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREUserName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREUserName);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREPassword, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREPassword);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCORECompany, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCORECompany);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::pSede, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::pSede);
#endif
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, int id, const _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_UserName", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREUserName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Password", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREPassword, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Company", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCORECompany, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:pSede", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::pSede, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC4 soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_m_USCOREUserName1 = 1;
	size_t soap_flag_m_USCOREPassword1 = 1;
	size_t soap_flag_m_USCORECompany1 = 1;
	size_t soap_flag_pSede1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_m_USCOREUserName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_UserName", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREUserName, "xsd:string"))
				{	soap_flag_m_USCOREUserName1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Password", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCOREPassword, "xsd:string"))
				{	soap_flag_m_USCOREPassword1--;
					continue;
				}
			}
			if (soap_flag_m_USCORECompany1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Company", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::m_USCORECompany, "xsd:string"))
				{	soap_flag_m_USCORECompany1--;
					continue;
				}
			}
			if (soap_flag_pSede1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:pSede", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::pSede, "xsd:string"))
				{	soap_flag_pSede1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_m_USCOREUserName1 > 0 || soap_flag_m_USCOREPassword1 > 0 || soap_flag_m_USCORECompany1 > 0 || soap_flag_pSede1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *p;
	size_t k = sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC4 soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::return_ = NULL;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::return_);
#endif
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(struct soap *soap, const char *tag, int id, const _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse), type))
		return soap->error;
	if (a->return_)
		soap_element_result(soap, "ns1:return");
	if (soap_out_PointerTostd__string(soap, "ns1:return", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:return", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:return");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *p;
	size_t k = sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_QueryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQueryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREUserName);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREPassword);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCORECompany);
	soap_default_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::pSede);
	soap_default_bool(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREbCount);
}

void _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREUserName, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREUserName);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREPassword, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREPassword);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCORECompany, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCORECompany);
	soap_embedded(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::pSede, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::pSede);
#endif
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, int id, const _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_UserName", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREUserName, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Password", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREPassword, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:m_Company", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCORECompany, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:pSede", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::pSede, ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:m_bCount", -1, &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREbCount, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC4 soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_m_USCOREUserName1 = 1;
	size_t soap_flag_m_USCOREPassword1 = 1;
	size_t soap_flag_m_USCORECompany1 = 1;
	size_t soap_flag_pSede1 = 1;
	size_t soap_flag_m_USCOREbCount1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_m_USCOREUserName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_UserName", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREUserName, "xsd:string"))
				{	soap_flag_m_USCOREUserName1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Password", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREPassword, "xsd:string"))
				{	soap_flag_m_USCOREPassword1--;
					continue;
				}
			}
			if (soap_flag_m_USCORECompany1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:m_Company", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCORECompany, "xsd:string"))
				{	soap_flag_m_USCORECompany1--;
					continue;
				}
			}
			if (soap_flag_pSede1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "ns1:pSede", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::pSede, "xsd:string"))
				{	soap_flag_pSede1--;
					continue;
				}
			}
			if (soap_flag_m_USCOREbCount1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_bool(soap, "ns1:m_bCount", &a->_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::m_USCOREbCount, "xsd:boolean"))
				{	soap_flag_m_USCOREbCount1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_m_USCOREUserName1 > 0 || soap_flag_m_USCOREPassword1 > 0 || soap_flag_m_USCORECompany1 > 0 || soap_flag_pSede1 > 0 || soap_flag_m_USCOREbCount1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *p;
	size_t k = sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_Query", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC4 soap_get__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::item);
}

void ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::item);
#endif
}

int ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, int id, const ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, "ns1:item", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::item, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, this, type);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, "ns1:item", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::item, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable * SOAP_FMAC2 soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *p;
	size_t k = sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, this, tag, type);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_get_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::SEDE = NULL;
	this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::GIRO = NULL;
	this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::PARTENZA = NULL;
	this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::COLORE_USCOREB = NULL;
	this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::ZP_USCOREDELAY = NULL;
}

void ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::SEDE);
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::GIRO);
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::PARTENZA);
	soap_serialize_PointerTostd__string(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::COLORE_USCOREB);
	soap_serialize_PointerTodouble(soap, &this->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::ZP_USCOREDELAY);
#endif
}

int ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, const ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:SEDE", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::SEDE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:GIRO", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::GIRO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:PARTENZA", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::PARTENZA, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:COLORE_B", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::COLORE_USCOREB, ""))
		return soap->error;
	if (soap_out_PointerTodouble(soap, "ns1:ZP_DELAY", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::ZP_USCOREDELAY, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, this, type);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SEDE1 = 1;
	size_t soap_flag_GIRO1 = 1;
	size_t soap_flag_PARTENZA1 = 1;
	size_t soap_flag_COLORE_USCOREB1 = 1;
	size_t soap_flag_ZP_USCOREDELAY1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SEDE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:SEDE", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::SEDE, "xsd:string"))
				{	soap_flag_SEDE1--;
					continue;
				}
			}
			if (soap_flag_GIRO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:GIRO", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::GIRO, "xsd:string"))
				{	soap_flag_GIRO1--;
					continue;
				}
			}
			if (soap_flag_PARTENZA1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:PARTENZA", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::PARTENZA, "xsd:string"))
				{	soap_flag_PARTENZA1--;
					continue;
				}
			}
			if (soap_flag_COLORE_USCOREB1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:COLORE_B", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::COLORE_USCOREB, "xsd:string"))
				{	soap_flag_COLORE_USCOREB1--;
					continue;
				}
			}
			if (soap_flag_ZP_USCOREDELAY1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTodouble(soap, "ns1:ZP_DELAY", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::ZP_USCOREDELAY, "xsd:double"))
				{	soap_flag_ZP_USCOREDELAY1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure * SOAP_FMAC2 soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *p;
	size_t k = sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, this, tag, type);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_get_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, int id, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC4 soap_in___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a, const char *type)
{
	size_t soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, sizeof(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, ""))
				{	soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *p;
	size_t k = sizeof(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *a, const char *tag, const char *type)
{
	if (soap_out___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag ? tag : "-ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery * SOAP_FMAC4 soap_get___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, int id, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query", -1, &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC4 soap_in___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a, const char *type)
{
	size_t soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, sizeof(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, "ns1:zpcu-qinfosedi-fascia-delay-ws_Query", &a->ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, ""))
				{	soap_flag_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *p;
	size_t k = sizeof(struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *a, const char *tag, const char *type)
{
	if (soap_out___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag ? tag : "-ns1:zpcu-qinfosedi-fascia-delay-ws_Query", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery * SOAP_FMAC4 soap_get___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, struct __ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, int id, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery **)soap_malloc(soap, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQuery", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, int id, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery ? type : NULL);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, const char *tag, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery **)soap_malloc(soap, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *)soap_instantiate__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery, sizeof(_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_Query", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(struct soap *soap, _ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__zpcu_qinfosedi_fascia_delay_ws_USCOREQuery(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, int id, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable ? type : NULL);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, const char *tag, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable **)soap_malloc(soap, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *)soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseTable", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseTable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure ? type : NULL);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure **)soap_malloc(soap, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *)soap_instantiate_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag ? tag : "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap *soap, double *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_double);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap *soap, const char *tag, int id, double *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_double, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_double(soap, tag, id, *a, type);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap *soap, const char *tag, double **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (double **)soap_malloc(soap, sizeof(double *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_double(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (double **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_double, sizeof(double), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap *soap, double *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodouble(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap *soap, double **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodouble(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, int id, const std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, const char *tag, std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, sizeof(ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure), 1, soap_finsert, soap_fbase))
				break;
			if (!soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, NULL, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure"))
				break;
		}
		else
		{	if (!soap_in_PointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(soap, tag, &n, "ns1:zpcu-qinfosedi-fascia-delay-ws_TabularQueryResponseStructure"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> *p;
	size_t k = sizeof(std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<ns1__zpcu_qinfosedi_fascia_delay_ws_USCORETabularQueryResponseStructure *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
