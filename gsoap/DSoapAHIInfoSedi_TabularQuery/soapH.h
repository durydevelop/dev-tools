/* soapH.h
   Generated by gSOAP 2.8.91 for /mnt/e/Dev/dev-tools/gsoap/temp/wsdl.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_int(struct soap*, int*);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_int(struct soap*, const char*, int, const int*, const char*);
SOAP_FMAC1 int* SOAP_FMAC2 soap_in_int(struct soap*, const char*, int*, const char*);
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse_DEFINED
#define SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, const char*, int, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *, const char*);
SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * soap_new_req__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(
	struct soap *soap,
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *Records)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records = Records;
	}
	return _p;
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * soap_new_set__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(
	struct soap *soap,
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *Records)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse::Records = Records;
	}
	return _p;
}

inline int soap_write__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *, const char*, const char*);

inline int soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *p)
{
	if (::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
#define SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, int, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*);
SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, n, NULL, NULL, NULL);
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new_req__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(
	struct soap *soap,
	const std::string& m_USCOREUserName,
	const std::string& m_USCOREPassword,
	const std::string& m_USCORECompany,
	const std::string& pSede)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName = m_USCOREUserName;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword = m_USCOREPassword;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany = m_USCORECompany;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede = pSede;
	}
	return _p;
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new_set__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(
	struct soap *soap,
	const std::string& m_USCOREUserName,
	const std::string& m_USCOREPassword,
	const std::string& m_USCORECompany,
	const std::string& pSede)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREUserName = m_USCOREUserName;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCOREPassword = m_USCOREPassword;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::m_USCORECompany = m_USCORECompany;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery::pSede = pSede;
	}
	return _p;
}

inline int soap_write__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQuery", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*, const char*);

inline int soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse_DEFINED
#define SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, const char*, int, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *, const char*);
SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * soap_new_req__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(
	struct soap *soap)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * soap_new_set__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(
	struct soap *soap,
	std::string *return_)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_QueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_QueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_QueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_QueryResponse", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *, const char*, const char*);

inline int soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *p)
{
	if (::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
#define SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, int, const _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_in__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*);
SOAP_FMAC1 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC2 soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, n, NULL, NULL, NULL);
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new_req__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(
	struct soap *soap,
	const std::string& m_USCOREUserName,
	const std::string& m_USCOREPassword,
	const std::string& m_USCORECompany,
	const std::string& pSede,
	bool m_USCOREbCount)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName = m_USCOREUserName;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword = m_USCOREPassword;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany = m_USCORECompany;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede = pSede;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount = m_USCOREbCount;
	}
	return _p;
}

inline _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new_set__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(
	struct soap *soap,
	const std::string& m_USCOREUserName,
	const std::string& m_USCOREPassword,
	const std::string& m_USCORECompany,
	const std::string& pSede,
	bool m_USCOREbCount)
{
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *_p = ::soap_new__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREUserName = m_USCOREUserName;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREPassword = m_USCOREPassword;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCORECompany = m_USCORECompany;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::pSede = pSede;
		_p->_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery::m_USCOREbCount = m_USCOREbCount;
	}
	return _p;
}

inline int soap_write__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_Query", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_Query", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_Query", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_Query", p->soap_type() == SOAP_TYPE__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*, const char*);

inline int soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (::soap_read__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable_DEFINED
#define SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, const char*, int, const ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *, const char*);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, const char*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *, const char*);
SOAP_FMAC1 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC2 soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, int, const char*, const char*, size_t*);

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, n, NULL, NULL, NULL);
}

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * soap_new_req_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(
	struct soap *soap)
{
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *_p = ::soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * soap_new_set_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(
	struct soap *soap,
	const std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> & item)
{
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *_p = ::soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable::item = item;
	}
	return _p;
}

inline int soap_write_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseTable", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable * SOAP_FMAC4 soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *, const char*, const char*);

inline int soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *p)
{
	if (::soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
#define SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char*, int, const ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *, const char*);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_in_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *, const char*);
SOAP_FMAC1 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC2 soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, int, const char*, const char*, size_t*);

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, n, NULL, NULL, NULL);
}

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * soap_new_req_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(
	struct soap *soap)
{
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *_p = ::soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * soap_new_set_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(
	struct soap *soap,
	std::string *ZPCODGIR,
	std::string *ZPCODPRO,
	double *ZP_USCOREDELAY)
{
	ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *_p = ::soap_new_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODGIR = ZPCODGIR;
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZPCODPRO = ZPCODPRO;
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure::ZP_USCOREDELAY = ZP_USCOREDELAY;
	}
	return _p;
}

inline int soap_write_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:zpcu_test_fascia_delay_TabularQueryResponseStructure", p->soap_type() == SOAP_TYPE_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure * SOAP_FMAC4 soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *, const char*, const char*);

inline int soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, const char *URL, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *p)
{
	if (::soap_read_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
#define SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, int, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*);
SOAP_FMAC1 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new_req___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(
	struct soap *soap)
{
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *_p = ::soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap);
	if (_p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, _p);
	}
	return _p;
}

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * soap_new_set___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(
	struct soap *soap,
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery)
{
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *_p = ::soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap);
	if (_p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, _p);
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery = ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*, const char*);

inline int soap_write___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, "-ns1:zpcu_test_fascia_delay_TabularQuery", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, "-ns1:zpcu_test_fascia_delay_TabularQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, "-ns1:zpcu_test_fascia_delay_TabularQuery", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, "-ns1:zpcu_test_fascia_delay_TabularQuery", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery * SOAP_FMAC4 soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *, const char*, const char*);

inline int soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *p)
{
	if (::soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
#define SOAP_TYPE___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, int, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_in___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*);
SOAP_FMAC1 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC2 soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new_req___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(
	struct soap *soap)
{
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *_p = ::soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap);
	if (_p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, _p);
	}
	return _p;
}

inline struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * soap_new_set___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(
	struct soap *soap,
	_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery)
{
	struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *_p = ::soap_new___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap);
	if (_p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, _p);
		_p->ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery = ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*, const char*);

inline int soap_write___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, "-ns1:zpcu_test_fascia_delay_Query", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, "-ns1:zpcu_test_fascia_delay_Query", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, "-ns1:zpcu_test_fascia_delay_Query", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p), 0) || ::soap_put___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, "-ns1:zpcu_test_fascia_delay_Query", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery * SOAP_FMAC4 soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *, const char*, const char*);

inline int soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (p)
	{	::soap_default___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, const char *URL, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap *soap, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *p)
{
	if (::soap_read___ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
#define SOAP_TYPE_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char *, int, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*, const char *);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*, const char*, const char*);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_get_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
#define SOAP_TYPE_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char *, int, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*, const char *);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_in_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*, const char*, const char*);
SOAP_FMAC3 struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_get_PointerTo__ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, struct __ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, const char *, int, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*, const char *);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
#define SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char *, int, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*, const char *);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery *const*, const char*, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQuery **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse_DEFINED
#define SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, const char *, int, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*, const char *);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse *const*, const char*, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQueryResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
#define SOAP_TYPE_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char *, int, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*, const char *);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_in_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, const char*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery *const*, const char*, const char*);
SOAP_FMAC3 _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery ** SOAP_FMAC4 soap_get_PointerTo_ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery(struct soap*, _ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCOREQuery **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable_DEFINED
#define SOAP_TYPE_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, const char *, int, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*, const char *);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, const char*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable *const*, const char*, const char*);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseTable **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
#define SOAP_TYPE_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char *, int, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*, const char *);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_in_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *const*, const char*, const char*);
SOAP_FMAC3 ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure ** SOAP_FMAC4 soap_get_PointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char*, int, const std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *, const char*);
SOAP_FMAC3 std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, const char*, std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *> *, const char*);
SOAP_FMAC1 std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure *>  * soap_new_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__zpcu_USCOREtest_USCOREfascia_USCOREdelay_USCORETabularQueryResponseStructure(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
